# gems
require "sinatra"
require "sendgrid-ruby"

# models

# understand how to construct new object from each class
# start with one, and dry up hard-code with templates as necessary to maintain functionality while allowing for auto-population of catalog
# define a random number price generator with floating numbers, but limit to reasonable price point
class Cookie
  def initialize(name, price, description)
    @name = name
    @price = price
    @description = description
  end
end 

class Muffin(*)
  # def
end 

class Cake(*)
  # def
end 

# endpoints
# to index
get "/" do
  erb :index
end
# to cookies
# to muffins

post "/contacts" do
  from = Sendgrid::Email.new(email: 'janelle.goettl@gmail.com')
  to = Sendgrid::Email.new(email: 'janelle.goettl@gmail.com')
  subject = '[subject]'
  content = Sendgrid::Content.new(
    type: 'text/html', 
    # for this value, find a way to connect an autogenerated catalog
    # is there a way to link to erb templates or classes?
    value: '[plain text content]'
  )
  
  # create mail object with from, subject, to and content
  mail = Sendgrid::Mail.new(from, subject, to, content)
  
  # sets up the api key
  sg = SendGrid::API.new(
    api_key: "[SENDGRID_API_KEY]"
  )
  
  # sends the email
  response = sg.client.mail._('send').post(request_body: mail.to_json)
  
  # display http response code
  puts response.status_code
  
  # display http response body
  puts response.body
  
  # display http response headers
  puts response.headers
end